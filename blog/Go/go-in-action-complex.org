#+TITLE:       Go实战(四) 复合数据类型
#+AUTHOR:      Pinvon
#+EMAIL:       pinvon@Inspiron
#+DATE:        2018-04-27 五

#+URI:         /blog/Go/%y/%m/%d/%t/ Or /blog/Go/%t/
#+TAGS:        Go
#+DESCRIPTION: <Add description here>

#+LANGUAGE:    en
#+OPTIONS:     H:4 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:t

* 注

学习自: Go 语言圣经

** 概述

数组和结构体有固定内存大小的数据结构; slice 和 map 是动态的数据结构, 会根据需要而动态增长.

* 数组

数组的长度固定, 我们一般不直接使用数组. slice 提供的功能会更多, 但我们要先理解数组, 才能理解 slice 的原理.

数组下标从 0 开始, len() 返回数组元素个数.

** 初始化

默认每个元素都被初始化为元素类型所对应的零值. 也可以自己赋予初始值:
#+BEGIN_SRC Golang
var q [3]int = [3]int{1, 2, 3}
var r [3]int = [3]int{1, 3}
fmt.Println(r[2])  // 0
#+END_SRC

可以根据初始化元素的个数来决定数组的长度:
#+BEGIN_SRC Golang
q := [...]int{1, 2, 3}
fmt.Printf("%T\n", q)  // [3]int
#+END_SRC

数组长度是数组类型的一部分, 因此下面的赋值是错误的:
#+BEGIN_SRC Golang
q := [3]int{1,2,3}
q = [4]int{1,2,3,4}  // 编译错误
#+END_SRC
另外, 数组长度必须是常量表达式, 因为数组长度在编译期确定.

** 索引和对应的值

我们可以在数组里存放索引-值, 做法如下:
#+BEGIN_SRC Golang
type Currency int

const (
    USD Currency = iota // 美元
    EUR                 // 欧元
    GBP                 // 英镑
    RMB                 // 人民币
)

symbol := [...]string{USD: "$", EUR: "€", GBP: "￡", RMB: "￥"}

fmt.Println(RMB, symbol[RMB]) // "3 ￥"
#+END_SRC

如果有索引未使用, 可以直接省略, Go 会使用零值来代替:
#+BEGIN_SRC Golang
r := [...]int{99:-1}
#+END_SRC
从 0 到 98 的索引对应的值都是 0; 索引为 99 对应的值是 -1.

** 数组运算

如果数组元素类型是可比较的, 且两个数组的所有元素都相等, 则这两个数组是相等的.
#+BEGIN_SRC Golang
a := [2]int{1, 2}
b := [...]int{1, 2}
c := [2]int{1, 3}
fmt.Println(a == b, a == c, b == c) // "true false false"
d := [3]int{1, 2}
fmt.Println(a == d) // compile error: cannot compare [2]int == [3]int
#+END_SRC

** 遍历

#+BEGIN_SRC Golang
var a [3]int             // array of 3 integers
fmt.Println(a[0])        // print the first element
fmt.Println(a[len(a)-1]) // print the last element, a[2]

// Print the indices and elements.
for i, v := range a {
    fmt.Printf("%d %d\n", i, v)
}

// Print the elements only.
for _, v := range a {
    fmt.Printf("%d\n", v)
}
#+END_SRC

* slice

slice 的语法和数组很像, 但不固定长度.

** slice 的数据结构

slice 的底层引用了一个数组对象.

一个 slice 由三部分构成: 指针, 长度, 容量.
1. 指针: 指向第一个 slice 元素对应的底层数组元素的地址.(注: slice 的第一个元素不一定是数组的第一个元素)
2. 长度: slice 中的元素数目, 不能超过容量, 使用 len() 获得.
3. 容量: 从 slice 的开始位置到底层数据的结尾位置, 使用 cap() 获得.
