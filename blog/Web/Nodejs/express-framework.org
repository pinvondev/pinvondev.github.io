#+TITLE:       Express框架
#+AUTHOR:      pinvon
#+EMAIL:       pinvon@ubuntu
#+DATE:        2018-03-13 二
#+URI:         /blog/%y/%m/%d/express框架
#+KEYWORDS:    <TODO: insert your keywords here>
#+TAGS:        Web
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: <TODO: insert your description here>

* 安装

** 创建工程目录
#+BEGIN_SRC Shell
mkdir test
cd test
#+END_SRC

** 配置

在项目根目录新建文件 =package.json=, 添加基本配置.
#+BEGIN_SRC JSON
{
    "name": "hello-world",
    "description": "hello world test app",
    "version": "0.0.1",
    "private": true,
    "dependencies": {
        "express": "4.x"
    }
}
#+END_SRC

** 安装
#+BEGIN_SRC Shell
npm install
#+END_SRC

** 启动文件
在项目根目录新建文件 =index.js=, 作为启动文件.
#+BEGIN_SRC JavaScript
var express = require('express');
var app = express();
app.get('/', function (req, res) {
    res.send('Hello world');
});
app.listen(3000);
#+END_SRC

** 运行.
#+BEGIN_SRC Shell
node index
#+END_SRC

打开浏览器, 输入地址: http://localhost:3000 , 网页将会显示Hello world.

** 合理的结构

合理的目录结构至关重要, 方便项目管理.

路由(用于指定不同访问路径所对应的回调函数)应该放在一个单独的目录中. 新建 =routes= 子目录, 创建文件 =index.js=, 编辑如下:
#+BEGIN_SRC JavaScript
module.exports = function (app) {
  app.get('/', function (req, res) {
    res.send('Hello world');
  });
  app.get('/customer', function(req, res){
    res.send('customer page');
  });
  app.get('/admin', function(req, res){
    res.send('admin page');
  });
};
#+END_SRC

而原本的 =index.js= 文件则修改如下:
#+BEGIN_SRC JavaScript
var express = require('express');
var app = express();
var routes = require('./routes')(app);
app.listen(3000);
#+END_SRC

* 运行原理

** 底层: http模块

=Node.js= 中 =http模块= 生成服务器的代码如下:
#+BEGIN_SRC JavaScript
var http = require("http");
var app = http.createServer(function(request, response) {
  response.writeHead(200, {"Content-Type": "text/plain"});
  response.end("Hello world!");
});
app.listen(3000, "localhost");
#+END_SRC
代码的关键是 =http.createServer()=, 表示生成一个HTTP服务器实例. 该方法接受一个回调函数, 参数分别代表HTTP请求和HTTP回应的request对象和response对象.

而 =Express= 框架对其进行了再包装, 上面的代码用 =Express= 改写如下:
#+BEGIN_SRC JavaScript
var express = require('express');
var app = express();
app.get('/', function (req, res) {
  res.send('Hello world!');
});
app.listen(3000);
#+END_SRC
原来用 =http.createServer()= 方法创建的app实例, 现在改成用 =Express= 的构造方法来生成. =Express框架= 等于是在 =http模块= 上加了一个中间层.

** 中间件

中间件是处理HTTP请求的函数. 它的特点是, 一个中间件处理完后, 才会传递给下一个中间件处理. 一种清晰的写法如下:
#+BEGIN_SRC JavaScript
var express = require("express");
var http = require("http");

var app = express();

app.use("/home", function(request, response, next) {
  response.writeHead(200, { "Content-Type": "text/plain" });
  response.end("Welcome to the homepage!\n");
});

app.use("/about", function(request, response, next) {
  response.writeHead(200, { "Content-Type": "text/plain" });
  response.end("Welcome to the about page!\n");
});

app.use(function(request, response) {
  response.writeHead(404, { "Content-Type": "text/plain" });
  response.end("404 error!\n");
});

http.createServer(app).listen(1337);
#+END_SRC

* Express的方法

** all()和HTTP动词方法

因为HTTP有多种请求, 如: GET, POST, PUT, DELETE, 为了使程序更加清晰, Express框架不建议统一使用 =use()=, 它提供了 =use()= 方法的一些别名, 根据不同的请求进行调用. 因此, 上面的代码还可以改成如下形式:
#+BEGIN_SRC JavaScript
var express = require("express");
var http = require("http");
var app = express();

app.all("*", function(request, response, next) {
  response.writeHead(200, { "Content-Type": "text/plain" });
  next();
});

app.get("/", function(request, response) {
  response.end("Welcome to the homepage!");
});

app.get("/about", function(request, response) {
  response.end("Welcome to the about page!");
});

app.get("*", function(request, response) {
  response.end("404!");
});

http.createServer(app).listen(1337);
#+END_SRC
=all()= 表示, 所有请求都必须通过该中间件, 参数中的 =*= 表示对所有路径都有效. 这样其他的中间件可以省去很多重复的代码. =get()= 表示只有HTTP请求方式为GET时, 才通过该中间件, 它的第一个参数是请求的路径, 由于 =get()= 的回调函数没有调用 =next()=, 所以只要有一个中间件被调用了, 后面的中间件就不会再被调用.

对于请求的路径, 除了使用绝对匹配外, 还可以模式匹配. 如:
#+BEGIN_SRC JavaScript
app.get("/hello/:who", function(req, res) {
	res.end("hello, " + req.params.who + ".");
});
#+END_SRC
上面的代码可以匹配"/hello/alice"网址, 网址中的alice将被捕获, 作为 =req.params.who= 属性的值. 需要注意的是, 捕获后一般需要对网址进行检查, 过滤不安全字符, 上面的写法只是为了演示, 实际生产中不应该这样直接使用用户提供的值.

如果在模式参数后面加上问号, 表示该参数可选.
#+BEGIN_SRC JavaScript
app.get('/hello/:who?',function(req,res) {
	if(req.params.id) {
    	res.end("Hello, " + req.params.who + ".");
	}
    else {
    	res.send("Hello, Guest.");
	}
});
#+END_SRC

更复杂的例子:
#+BEGIN_SRC JavaScript
app.get('/forum/:fid/thread/:tid', middleware)

// 匹配/commits/71dbb9c
// 或/commits/71dbb9c..4c084f9这样的git格式的网址
app.get(/^\/commits\/(\w+)(?:\.\.(\w+))?$/, function(req, res){
  var from = req.params[0];
  var to = req.params[1] || 'HEAD';
  res.send('commit range ' + from + '..' + to);
});
#+END_SRC

** set方法

用于指定变量的值.
#+BEGIN_SRC JavaScript
app.set("views", __dirname + "/views");
app.set("view engine", "jade");
#+END_SRC
该代码使用 =set()=, 为系统变量"views"和"view engin"指定值.

** response对象

response.redirect(): 网址重定向. 如: response.redirect("/hello/anime");
response.sendFile(): 发送文件. 如: response.sendFile("/path/to/anime.mp4");
response.render(): 渲染网页模板. 如:
#+BEGIN_SRC JavaScript
app.get("/", function(request, response) {
  response.render("index", { message: "Hello World" });
});
#+END_SRC
该代码使用 =render()= 方法, 把 =message= 变量传入index模板, 渲染成HTML网页.

** request对象

request.ip: 属性, 用于获得HTTP请求的IP地址.
request.files: 用于获取上传的文件.

** 搭建HTTPs服务器

使用Express搭建HTTPs加密服务器.
#+BEGIN_SRC Javascript
var fs = require('fs');
var options = {
  key: fs.readFileSync('E:/ssl/myserver.key'),
  cert: fs.readFileSync('E:/ssl/myserver.crt'),
  passphrase: '1234'
};

var https = require('https');
var express = require('express');
var app = express();

app.get('/', function(req, res){
  res.send('Hello World Expressjs');
});

var server = https.createServer(options, app);
server.listen(8084);
console.log('Server is running on port 8084');
#+END_SRC

* 项目开发实例

首先创建工程目录, 配置, 配置文件如下:
#+BEGIN_SRC JSON
{
   "name": "demo",
   "description": "My First Express App",
   "version": "0.0.1",
   "dependencies": {
      "express": "3.x"
   }
}
#+END_SRC

安装, 编写启动文件 =app.js=. 内容如下:
#+BEGIN_SRC JavaScript
var express = require('express');
var path = require('path');
var app = express();

// 设定port变量，意为访问端口
app.set('port', process.env.PORT || 3000);

// 设定views变量，意为视图存放的目录
app.set('views', path.join(__dirname, 'views'));

// 设定view engine变量，意为网页模板引擎
app.set('view engine', 'jade');

app.use(express.favicon());
app.use(express.logger('dev'));
app.use(express.bodyParser());
app.use(express.methodOverride());
app.use(app.router);

// 设定静态文件目录，比如本地文件
// 目录为demo/public/images，访问
// 网址则显示为http://localhost:3000/images
app.use(express.static(path.join(__dirname, 'public')));

app.listen(app.get('port'));
#+END_SRC

=set()= 用于设定内部变量, =use()= 用于调用express的中间件.

在浏览器中访问: http://localhost:3000 , 网页提示"Cannot GET /", 表示没有为网站的根路径指定可以显示的内容. 所以下一步开始配置路由.

** 配置路由

所谓"路由", 就是指为不同的访问路径, 指定不同的处理方法.

在 =app.js= 中, 指定根路径的处理方法.
#+BEGIN_SRC JavaScript
app.get('/', function(req, res) {
   res.send('Hello World');
});
#+END_SRC
再通过浏览器访问, 就会显示"Hello World".

如果需要指定HTTP头信息, 回调函数就必须换一种写法:
#+BEGIN_SRC JavaScript
app.get('/', function(req, res){
  var body = 'Hello World';
  res.setHeader('Content-Type', 'text/plain');
  res.setHeader('Content-Length', body.length);
  res.end(body);
});
#+END_SRC

*** 指定特定路径

假定用户访问 =/api路径=, 希望返回一个JSON字符串, 可以这么写:
#+BEGIN_SRC JavaScript
app.get('/api', function(request, response) {
   response.send({name:"张三",age:40});
});
#+END_SRC

为了便于管理, 我们把路由的回调函数, 封装成模块, 在 =routes目录= 下建立一个 =api.js文件=.
#+BEGIN_SRC Javascript
exports.index = function (req, res) {
    res.json(200, {name:"张三", age:40});
}
#+END_SRC

然后 在 =app.js= 中加载这个模块:
#+BEGIN_SRC Javascript
var api = require('./routes/api');
app.get('/api', api.index);
#+END_SRC

此时, 在浏览器中访问 http://localhost:3000/api 就会有正确的文字显示出来.

** 静态网页模板

在项目目录中, 建立一个子目录 =views=, 用于存放网页模板. 假设该项目有三个路径: 根路径(/), 自我介绍(/about), 文章(/article), 则 =app.js= 可以这样写:
