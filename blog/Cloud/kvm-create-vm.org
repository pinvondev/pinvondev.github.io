#+TITLE:       KVM 创建虚拟机
#+AUTHOR:      pinvon
#+EMAIL:       pinvon@t480
#+DATE:        2019-04-23 二
#+URI:         /blog/Cloud/%y/%m/%d/%t/ Or /blog/Cloud/%t/
#+TAGS:        云计算
#+DESCRIPTION: <Add description here>
#+LANGUAGE:    en
#+OPTIONS:     H:4 num:nil toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:t

* 查看是否支持 KVM

KVM 是基于 x86 虚拟化扩展 (Intel VT 或者 AMD-V) 技术的虚拟机软件, 所以查看 CPU 是否支持 VT 技术, 就可以判断是否支持KVM.
#+BEGIN_EXAMPLE
cat /proc/cpuinfo | egrep 'vmx|svm'
#+END_EXAMPLE
如果返回结果中有 vmx(Intel)或 svm(AMD) 字样, 就说明CPU的支持的.

关闭 SELinux: 将 /etc/sysconfig/selinux 中的 SELinux=enforcing 修改为 SELinux=disabled.

* 安装 KVM 环境

#+BEGIN_EXAMPLE
# ubuntu
apt -y install qemu-kvm libvirt-bin virtinst bridge-utils cpu-checker

# centos
yum -y install qemu-kvm libvirt virt-install bridge-utils 
#+END_EXAMPLE
主要会安装以下几个包:
|-----------------+------------------------------------|
| qemu-kvm        | 主要的 KVM 程序包                  |
| python-virtinst | 创建虚机所需要的命令行工具和程序库 |
| virt-manager    | 管理虚机的 GUI                     |
| virt-top        | 虚机统计                           |
| virt-viewer     | GUI 连接程序, 连接到已配置好的虚机 |
| libvirt         | 提供 libvirt 服务                  |
| virt-install    | 基于 libvirt 服务的虚机创建命令    |
| bridge-utils    | 创建和管理桥接设备的工具           |
|-----------------+------------------------------------|

重启, 以便加载 kvm 模块:
#+BEGIN_EXAMPLE
reboot

# 查看 KVM 模块是否加载
lsmod | grep kvm

# 确认 kvm 已安装
kvm-ok

# 启动 libvirtd 服务, 设置开机启动
systemctl enable libvirtd
systemctl start libvirtd
#+END_EXAMPLE

* 创建虚机

** 使用 virt-install 创建虚机

#+BEGIN_EXAMPLE
virt-install \
--virt-type=kvm \
--name=centos78 \
--vcpus=2 \
--memory=4096 \
--location=/tmp/CentOS-7-x86_64-Minimal-1511.iso \
--disk path=/home/vms/centos78.qcow2,size=40,format=qcow2 \
--network bridge=br0 \
--graphics none \
--extra-args='console=ttyS0' \
--force
#+END_EXAMPLE

如果只是做个测试, 可以使用 cirros 镜像文件来测试, 我们下载 cirros-0.x.0-x86_64-disk.img 文件即可.

#+BEGIN_EXAMPLE
# 查看镜像文件信息
qemu-img info cirrors-0.4.0-x86_64-disk.img
#+END_EXAMPLE

***  virsh-install 命令介绍

#+BEGIN_EXAMPLE
–name指定虚拟机名称
–memory分配内存大小。
–vcpus分配CPU核心数，最大与实体机CPU核心数相同
–disk指定虚拟机镜像，size指定分配大小单位为G。
–network网络类型，此处用的是默认，一般用的应该是bridge桥接。
–accelerate加速
–cdrom指定安装镜像iso
–vnc启用VNC远程管理，一般安装系统都要启用。
–vncport指定VNC监控端口，默认端口为5900，端口不能重复。
–vnclisten指定VNC绑定IP，默认绑定127.0.0.1，这里改为0.0.0.0。
–os-type=linux,windows
–os-variant=rhel6

--name      指定虚拟机名称
--ram       虚拟机内存大小，以 MB 为单位
--vcpus     分配CPU核心数，最大与实体机CPU核心数相同
–-vnc       启用VNC远程管理，一般安装系统都要启用。
–-vncport   指定VNC监控端口，默认端口为5900，端口不能重复。
–-vnclisten  指定VNC绑定IP，默认绑定127.0.0.1，这里改为0.0.0.0。
--network   虚拟机网络配置
  # 其中子选项，bridge=br0 指定桥接网卡的名称。

–os-type=linux,windows
–os-variant=rhel7.2

--disk 指定虚拟机的磁盘存储位置
  # size，初始磁盘大小，以 GB 为单位。

--location 指定安装介质路径，如光盘镜像的文件路径。
--graphics 图形化显示配置
  # 全新安装虚拟机过程中可能会有很多交互操作，比如设置语言，初始化 root 密码等等。
  # graphics 选项的作用就是配置图形化的交互方式，可以使用 vnc（一种远程桌面软件）进行链接。
  # 我们这列使用命令行的方式安装，所以这里要设置为 none，但要通过 --extra-args 选项指定终端信息，
  # 这样才能将安装过程中的交互信息输出到当前控制台。
--extra-args 根据不同的安装方式设置不同的额外选项
#+END_EXAMPLE


** 通过镜像创建虚机

创建虚拟机镜像文件:
#+BEGIN_EXAMPLE
# 复制第一次安装的干净系统镜像，作为基础镜像文件，
# 后面创建虚拟机使用这个基础镜像
cp /home/vms/centos.88.qcow2 /home/vms/centos7.base.qcow2

# 使用基础镜像文件，创建新的虚拟机镜像
cp /home/vms/centos7.base.qcow2 /home/vms/centos7.113.qcow2
#+END_EXAMPLE

创建虚拟机配置文件:
#+BEGIN_EXAMPLE
# 复制第一次安装的干净系统镜像，作为基础配置文件。
virsh dumpxml centos.88 > /home/vms/centos7.base.xml

# 使用基础虚拟机镜像配置文件，创建新的虚拟机配置文件
cp /home/vms/centos7.base.xml /home/vms/centos7.113.xml

# 编辑新虚拟机配置文件
vi /home/vms/centos7.113.xml
#+END_EXAMPLE

主要是修改虚拟机文件名, UUID, 镜像地址和网卡地址, UUID 可以使用 uuidgen 命令生成:
#+BEGIN_EXAMPLE
<domain type='kvm'>
  <name>centos7.113</name>
  <uuid>1e86167a-33a9-4ce8-929e-58013fbf9122</uuid>
  <devices>
    <disk type='file' device='disk'>
      <source file='/home/vms/centos7.113.img'/>
    </disk>
    <interface type='bridge'>
      <mac address='00:00:00:00:00:04'/>
    </interface>    
    </devices>
</domain>

# 定义虚机
virsh define /home/vms/centos7.113.xml

# 定义之后即可启动
virsh start centos7.113

# virsh create 相当于 virsh define 和 virsh start
virsh create /home/vms/centos7.113.xml
#+END_EXAMPLE

* 连接虚拟机进行配置

** 使用 VNC 连接

#+BEGIN_EXAMPLE
# 安装 vnc-server 和 tigervnc
yum install vnc-server tigervnc

# 查看 vnc 端口
virsh vncdisplay centos7.113

# 连接
vncviewer 127.0.0.1:0
#+END_EXAMPLE

** 使用 virsh console 连接

#+BEGIN_EXAMPLE
virsh console <虚机名称>
#+END_EXAMPLE

如果出现 Escape character is ^], 则需要先通过其他方式进入虚拟机进行配置:
#+BEGIN_EXAMPLE
# 添加ttyS0的安全许可，允许root登录
echo "ttyS0" >> /etc/securetty

# 在/etc/grub.conf文件中为内核添加参数 console=ttyS0
kernel /vmlinuz-2.6.32-431.el6.x86_64 ro root=/dev/mapper/VolGroup-lv_root rd_NO_LUKS LANG=en_US.UTF-8 rd_NO_MD rd_LVM_LV=VolGroup/lv_swap SYSFONT=latarcyrheb-sun16 crashkernel=auto rd_LVM_LV=VolGroup/lv_root  KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet console=ttyS0

# 在/etc/inittab中添加agetty
S0:12345:respawn:/sbin/agetty ttyS0 115200

# 重启虚拟机
reboot
#+END_EXAMPLE

配置虚机网络.
#+BEGIN_EXAMPLE
emacs -nw /etc/sysconfig/network-scripts/ifcfg-eth0

TYPE=Ethernet
BOOTPROTO=static
IPADDR=192.168.120.200
PREFIX=24
GATEWAY=192.168.120.1
DEFROUTE=yes
PEERDNS=yes
PEERROUTES=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes
IPV6_FAILURE_FATAL=no
NAME=eth0
UUID=adfa3b7d-bf60-47e6-8482-871dee686fb5
DEVICE=eth0
ONBOOT=yes
#+END_EXAMPLE

DNS 可以通过 host, dig, nslookup 等工具来查询, 然后也加入到 ifcfg-eth0 文件中, 或通过命令:
#+BEGIN_EXAMPLE
echo "namespace xxx.xxx.xxx.xxx" > /etc/resolv.conf
#+END_EXAMPLE

激活网卡:
#+BEGIN_EXAMPLE
ifup eth0
#+END_EXAMPLE
